{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket"
    },
    "HelloWorldLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/hello-world-dev-helloWorld"
      }
    },
    "S3uploadImageLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/hello-world-dev-s3uploadImage"
      }
    },
    "SubscribeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/hello-world-dev-subscribe"
      }
    },
    "PublishLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/hello-world-dev-publish"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "dev",
                  "hello-world",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/hello-world-dev-helloWorld:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/hello-world-dev-s3uploadImage:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/hello-world-dev-subscribe:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/hello-world-dev-publish:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/hello-world-dev-helloWorld:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/hello-world-dev-s3uploadImage:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/hello-world-dev-subscribe:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/hello-world-dev-publish:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:PutObjectAcl",
                    "s3:GetObject"
                  ],
                  "Resource": [
                    "arn:aws:s3:::some-s3-bucket/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:CreateQueue",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes",
                    "sqs:GetQueueUrl",
                    "sqs:ReceiveMessage",
                    "sqs:SendMessage"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "SomeQueueName",
                      "Arn"
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:DescribeLogStreams"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn:aws:logs",
                        {
                          "Ref": "AWS::Region"
                        },
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "log-group:/aws/lambda/*:*:*"
                      ]
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:GetMetricData"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "SomeQueueName",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "hello-world",
              "dev",
              "eu-central-1",
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "HelloWorldLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/hello-world/dev/1551556067859-2019-03-02T19:47:47.859Z/helloWorld.zip"
        },
        "FunctionName": "hello-world-dev-helloWorld",
        "Handler": "src/modules/hello-world/index.helloWorldHandler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 10,
        "Description": "hello world",
        "Environment": {
          "Variables": {
            "REGION": "eu-central-1",
            "SQS_ARN": {
              "Ref": "SomeQueueName"
            },
            "S3_BUCKET": {
              "Ref": "S3Bucket"
            },
            "STAGE": "dev",
            "PROFILE": "",
            "QUEUE_NAME": "basic-queue",
            "S3_BUCKET_NAME": "some-s3-bucket"
          }
        }
      },
      "DependsOn": [
        "HelloWorldLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "HelloWorldLambdaVersion5v6DiCUlm1tnnXNZhyg0u820X2JblIsOA8A0WedCA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "HelloWorldLambdaFunction"
        },
        "CodeSha256": "CxtRihzw0I6bU8SEqchZxpabAWyBlQH0ZDJOL+EciFk=",
        "Description": "hello world"
      }
    },
    "S3uploadImageLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/hello-world/dev/1551556067859-2019-03-02T19:47:47.859Z/s3uploadImage.zip"
        },
        "FunctionName": "hello-world-dev-s3uploadImage",
        "Handler": "src/modules/s3-upload-image/index.s3UploadImage",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 10,
        "Description": "hello world",
        "Environment": {
          "Variables": {
            "REGION": "eu-central-1",
            "SQS_ARN": {
              "Ref": "SomeQueueName"
            },
            "S3_BUCKET": {
              "Ref": "S3Bucket"
            },
            "STAGE": "dev",
            "PROFILE": "",
            "QUEUE_NAME": "basic-queue",
            "S3_BUCKET_NAME": "some-s3-bucket"
          }
        }
      },
      "DependsOn": [
        "S3uploadImageLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "S3uploadImageLambdaVersionzXlVGW8WY8uX4OLUcTgS2Lr10SQIrGHDb7j5nvG0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "S3uploadImageLambdaFunction"
        },
        "CodeSha256": "zNjR47E5KFwBMLryrNi5LgWJN+xPK1AC31tArsbVVoc=",
        "Description": "hello world"
      }
    },
    "SubscribeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/hello-world/dev/1551556067859-2019-03-02T19:47:47.859Z/subscribe.zip"
        },
        "FunctionName": "hello-world-dev-subscribe",
        "Handler": "src/modules/sqs-publish-subscribe/index.subscribe",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 120,
        "Description": "Listens to sqs events",
        "Environment": {
          "Variables": {
            "REGION": "eu-central-1",
            "SQS_ARN": {
              "Ref": "SomeQueueName"
            },
            "S3_BUCKET": {
              "Ref": "S3Bucket"
            },
            "STAGE": "dev",
            "PROFILE": "",
            "QUEUE_NAME": "basic-queue",
            "S3_BUCKET_NAME": "some-s3-bucket"
          }
        }
      },
      "DependsOn": [
        "SubscribeLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "SubscribeLambdaVersionl527oYc7M9XVHDOLVLEAGL3czSp363KonzX3bCoyKw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SubscribeLambdaFunction"
        },
        "CodeSha256": "Iw36uX8UREWwX2+Wklc1fmIB9Zc//xHe6/gN037YKO8=",
        "Description": "Listens to sqs events"
      }
    },
    "PublishLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/hello-world/dev/1551556067859-2019-03-02T19:47:47.859Z/publish.zip"
        },
        "FunctionName": "hello-world-dev-publish",
        "Handler": "src/modules/sqs-publish-subscribe/index.publish",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "nodejs8.10",
        "Timeout": 120,
        "Description": "Listens to sqs events",
        "Environment": {
          "Variables": {
            "REGION": "eu-central-1",
            "SQS_ARN": {
              "Ref": "SomeQueueName"
            },
            "S3_BUCKET": {
              "Ref": "S3Bucket"
            },
            "STAGE": "dev",
            "PROFILE": "",
            "QUEUE_NAME": "basic-queue",
            "S3_BUCKET_NAME": "some-s3-bucket"
          }
        }
      },
      "DependsOn": [
        "PublishLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "PublishLambdaVersionYs4VLCB1EGiyunApO2nMvjbdr5CEg1tzH2uauU5PWsE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PublishLambdaFunction"
        },
        "CodeSha256": "Iw36uX8UREWwX2+Wklc1fmIB9Zc//xHe6/gN037YKO8=",
        "Description": "Listens to sqs events"
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-hello-world",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        }
      }
    },
    "ApiGatewayResourceHelloDashworld": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "hello-world",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceS3DashuploadDashimage": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "s3-upload-image",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourcePublish": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "publish",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodHelloDashworldGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceHelloDashworld"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "HelloWorldLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodS3DashuploadDashimagePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceS3DashuploadDashimage"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "S3uploadImageLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodPublishGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourcePublish"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PublishLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayDeployment1551556067915": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodHelloDashworldGet",
        "ApiGatewayMethodS3DashuploadDashimagePost",
        "ApiGatewayMethodPublishGet"
      ]
    },
    "HelloWorldLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "HelloWorldLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Join": [
            "",
            [
              "apigateway.",
              {
                "Ref": "AWS::URLSuffix"
              }
            ]
          ]
        },
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "S3uploadImageLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "S3uploadImageLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Join": [
            "",
            [
              "apigateway.",
              {
                "Ref": "AWS::URLSuffix"
              }
            ]
          ]
        },
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "PublishLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PublishLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Join": [
            "",
            [
              "apigateway.",
              {
                "Ref": "AWS::URLSuffix"
              }
            ]
          ]
        },
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SubscribeEventSourceMappingSQSSomeQueueName": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": "IamRoleLambdaExecution",
      "Properties": {
        "BatchSize": 3,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "SomeQueueName",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "SubscribeLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": "True"
      }
    },
    "SomeQueueName": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "basic-queue",
        "VisibilityTimeout": 130,
        "MessageRetentionPeriod": 260
      }
    },
    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "some-s3-bucket",
        "AccessControl": "PublicRead"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "HelloWorldLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "HelloWorldLambdaVersion5v6DiCUlm1tnnXNZhyg0u820X2JblIsOA8A0WedCA"
      }
    },
    "S3uploadImageLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "S3uploadImageLambdaVersionzXlVGW8WY8uX4OLUcTgS2Lr10SQIrGHDb7j5nvG0"
      }
    },
    "SubscribeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SubscribeLambdaVersionl527oYc7M9XVHDOLVLEAGL3czSp363KonzX3bCoyKw"
      }
    },
    "PublishLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PublishLambdaVersionYs4VLCB1EGiyunApO2nMvjbdr5CEg1tzH2uauU5PWsE"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.eu-central-1.",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      }
    }
  }
}